pred <-predict(cv.ridge,s=opt_lambda,newx = as.matrix(sapply(test),as.numeric))
opt_lambda<-cv.ridge$lambda.min
cv.ridge$lambda.1se
coef(cv.ridge,s=cv.ridge$lambda.min)
pred <-predict(cv.ridge,s=opt_lambda,newx = as.matrix(sapply(test),as.numeric))
fit<-cv.ridge$glmnet.fit
pred <-predict(fit,s=opt_lambda,newx = as.matrix(sapply(test),as.numeric))
pred <-predict(fit,s=opt_lambda,newx = test)
pred <-predict(fit,s=opt_lambda,newx = matrix(test))
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
pred <-predict(fit,s=opt_lambda,newx = matrix(test))
require(methods)
pred <-predict(fit,s=opt_lambda,newx = matrix(test))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(test),as.numeric))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(test))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(test))
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
#install.packages('glmnet')
library('glmnet')
set.seed(123)
cv.ridge <- cv.glmnet(x,y,family='binomial',parallel=TRUE, standardize=TRUE,alpha=0,type.measure = 'auc')
plot(cv.ridge)
opt_lambda<-cv.ridge$lambda.min
cv.ridge$lambda.1se
coef(cv.ridge,s=cv.ridge$lambda.min)
fit<-cv.ridge$glmnet.fit
pred <-predict(fit,s=opt_lambda,newx = data.matrix(test))
print(fit)
misClasificError <- mean(pred != test$Payment_status)
misClasificError <- mean(pred != test$Payment_status)
pred <-predict(fit,s=opt_lambda,newx = data.matrix(test))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(X = test,as.numeric))
misClasificError <- mean(pred != test$Payment_status)
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(X = test,as.numeric))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(X = test,as.numeric)))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(X = test),as.numeric))
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(X = test),as.numeric))
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
?sapply
pred <-predict(fit,s=opt_lambda,newx = data.matrix(sapply(X = test,FUN = as.numeric)))
pred <-predict(fit,s=opt_lambda,newx = test)
x <- (as.matrix(sapply(train %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6),as.numeric)))
head(x)
y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
library(dplyr)
x <- (as.matrix(sapply(train %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6),as.numeric)))
head(x)
y <- as.matrix(sapply(train %>%select(Payment_status),as.numeric))
#install.packages("lars")
library(lars)
las <- lars(x, y, type="lasso")
plot(las, plottype="coefficients")
las
plot(las, plottype="Cp")
cvlas <- cv.lars(x, y, type="lasso")
cvlas
frac <- cvlas$fraction[which.min(cvlas$cv)]
frac
las.coef <- predict.lars(las, type="coefficients", mode="fraction", s=frac)
las.coef
pred <-predict(cvlas,as.matrix(sapply(test),as.numeric))
x <- (as.matrix(sapply(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6),as.numeric)))
head(x)
y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- df$Payment_status
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- df$Payment_status
fit.lasso = glmnet(x,y,alpha = 1)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
fit.lasso = glmnet(x,y,alpha = 1)
fit.lasso = glmnet(x,y,alpha = 1,family = "binomial")
plot(fit.lasso,xvar="lambda",label=TRUE)
smp_size <- floor(0.80 * nrow(x))
set.seed(123)
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
train <- x[train_ind, ]
test <- x[-train_ind, ]
stopifnot(nrow(train) + nrow(test) == nrow(df))
head(train)
fit.lasso = glmnet(train,y,alpha = 1,family = "binomial")
y_train <- y[train_ind,]
y_test <-y [-train_ind,]
y_train <- y[train_ind]
y_test <-y [-train_ind]
stopifnot(nrow(train) + nrow(test) == nrow(df))
fit.lasso = glmnet(train,y,_y_trainalpha = 1,family = "binomial")
fit.lasso = glmnet(train,y,_y_train,alpha = 1,family = "binomial")
fit.lasso = glmnet(train,y_train,alpha = 1,family = "binomial")
plot(fit.lasso,xvar="lambda",label=TRUE)
cvlas <- cv.lars(train, y_train, type="lasso")
#library(lars)
#las <- lars(x, y, type="lasso")
#plot(las, plottype="coefficients")
#las
#plot(las, plottype=""Cp"")"
cvlas <- cv.lars(train, y_train, type="lasso")
#library(lars)
#las <- lars(x, y, type="lasso")
#plot(las, plottype="coefficients")
#las
#plot(las, plottype=""Cp"")"
cvlas <- cv.lars(train, y_train, type="lasso")
pred <-predict(fit.lasso,test)
misClasificError <- mean(pred != y_test)
print(paste('Accuracy',1-misClasificError))
pred <-predict(fit.lasso,test)
misClasificError <- mean(pred != y_test)
print(paste('Accuracy',1-misClasificError))
library(dplyr)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
smp_size <- floor(0.80 * nrow(x))
set.seed(123)
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
train <- x[train_ind, ]
y_train <- y[train_ind]
test <- x[-train_ind, ]
y_test <-y [-train_ind]
stopifnot(nrow(train) + nrow(test) == nrow(df))
library(dplyr)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
smp_size <- floor(0.80 * nrow(x))
set.seed(123)
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
train <- x[train_ind, ]
y_train <- y[train_ind]
test <- x[-train_ind, ]
y_test <-y [-train_ind]
stopifnot(nrow(train) + nrow(test) == nrow(df))
fit.lasso = glmnet(train,y_train,alpha = 1,family = "binomial")
plot(fit.lasso,xvar="lambda",label=TRUE)
#library(lars)
#las <- lars(x, y, type="lasso")
#plot(las, plottype="coefficients")
#las
#plot(las, plottype=""Cp"")"
cvlas <- cv.lars(train, y_train, type="lasso")
plot(fit.lasso,xvar="lambda",label=TRUE)
fit.lasso = glmnet(train,y_train,alpha = 1,family = "binomial")
plot(fit.lasso,xvar="lambda",label=TRUE)
pred <-predict(fit.lasso,test)
print(pred)
library(dplyr)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
smp_size <- floor(0.80 * nrow(x))
set.seed(123)
train_ind <- sample(seq_len(nrow(x)), size = smp_size)
train <- x[train_ind, ]
y_train <- y[train_ind]
test <- x[-train_ind, ]
y_test <-y [-train_ind]
stopifnot(nrow(train) + nrow(test) == nrow(df))
print(pred)
pred <-predict(fit.lasso,test,type = response)
pred <-predict(fit.lasso,test,type = "response")
print(pred)
misClasificError <- mean(pred != y_test)
print(paste('Accuracy',1-misClasificError))
library(lars)
las <- lars(train, y_train, type="lasso")
library(lars)
las <- lars(train, y_train, type="lasso")
library(lars)
las <- lars(train, y_train, type="lasso")
las <- lars(train, y_train, type="lasso",eps = .Machine$double.eps)
las <- lars(train, y_train, type="lasso")
las <- lars(x,y, type="lasso")
y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
library(lars)
las <- lars(x,y, type="lasso")
plot(las, plottype="coefficients")
y <- as.matrix(sapply(df %>%select(Payment_status),as.factor))
las <- lars(x,y, type="lasso")
y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
x <- (data.matrix(train %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
y <- data.matrix(sapply(df %>%select(Payment_status),as.factor))
las <- lars(x,y_train, type="lasso")
library(dplyr)
x <- (data.matrix(train %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
typeof(df)
typeof(train)
head(train)
head(df)
x_train <- train
head(x)
y_train <- df[train_ind,"Payment_status"]
head(y_train)
las <- lars(x_train,y_train, type="lasso")
fit.lasso = glmnet(x_train,y_train,alpha = 1,family = "binomial")
library(dplyr)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
fit.lasso = glmnet(x,y,alpha = 1,family = "binomial")
plot(fit.lasso,xvar="lambda",label=TRUE)
pred <-predict(cvlas,as.matrix(sapply(test),as.numeric))
pred <-predict(fit.lasso,as.matrix(sapply(test),as.numeric))
pred <-predict(fit.lasso,test)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
print(pred)
library(dplyr)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
fit.lasso = glmnet(x,y,alpha = 1,family = "binomial")
print(fit.lasso)
plot(fit.lasso,xvar="lambda",label=TRUE)
pred <-predict(fit.lasso,as.matrix(sapply(test),as.numeric))
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
library(dplyr)
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- as.factor(df$Payment_status)
x <- (model.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
x<- model.matrix(Payment_status ~.,train)[-"Payment_status"]
x<- data.matrix(Payment_status ~.,train)[-"Payment_status"]
x<- model.matrix.default(Payment_status ~.,train)[-"Payment_status"]
x<- model.matrix(Payment_status ~.,as.data.frame(train))[-"Payment_status"]
x<- model.matrix(Payment_status ~.,as.data.frame(train))
x<- model.matrix(Payment_status ~.,as.data.frame(train))
x <- (model.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
x <- (data.matrix(df %>%
select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
x<- model.matrix(Payment_status ~.,df)[-"Payment_status"]
head(df)
x<- model.matrix(Payment_status ~.,df)[-25]
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
#y <- as.factor(df$Payment_status)
train
train <- df[train_ind, ]
head(train)
x<- model.matrix(Payment_status ~.,train)[-25]
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
#y <- as.factor(df$Payment_status)
head(y)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- (train$Payment_status)
fit.lasso = glmnet(x,y,alpha = 1,family = "binomial")
x<- model.matrix(Payment_status ~.,train)[-25]
head(x)
x<- model.matrix(Payment_status ~.,df)[-25]
head(x)
print(x)
x<- model.matrix(Payment_status~.,df)[-25]
#x <- (data.matrix(df %>%
#                 select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
x<- data.matrix(Payment_status~.,df)[-25]
x<- data.matrix(Payment_status~.,df)
x<- model.matrix(Payment_status~.,df)
#x <- (data.matrix(df %>%
#                 select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
x<- model.matrix(Payment_status~.,train)
#x <- (data.matrix(df %>%
#                 select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- (train$Payment_status)
fit.lasso = glmnet(x,y,alpha = 1,family = "binomial")
print(fit.lasso)
plot(fit.lasso,xvar="lambda",label=TRUE)
x_test <- model.matrix(Payment_status~.,test)
test <- df[-train_ind, ]
x_test <- model.matrix(Payment_status~.,test)
probab <- fit.lasso %>% predict(newx=x_test)
predicted.classes <- ifelse(probabilities > 0.5, 1, 0)
predicted.classes <- ifelse(probab > 0.5, 1, 0)
observed.classes <- test$Payment_status
mean(predicted.classes == observed.classes)
fit.ridge = glmnet(x,y,alpha = 0,family = "binomial")
print(fit.ridge)
plot(fit.ridge,xvar="lambda",label=TRUE)
x_test <- model.matrix(Payment_status~.,test)
probab <- fit.ridge %>% predict(newx=x_test)
predicted.classes <- ifelse(probab > 0.5, 1, 0)
observed.classes <- test$Payment_status
mean(predicted.classes == observed.classes)
cv.ridge <- cv.glmnet(x,y,family='binomial',parallel=TRUE, standardize=TRUE,alpha=0,type.measure = 'auc')
plot(cv.ridge)
opt_lambda<-cv.ridge$lambda.min
cv.ridge$lambda.1se
coef(cv.ridge,s=cv.ridge$lambda.min)
fit.ridge = cv.glmnet(x,y,alpha = 0,family = "binomial",lambda = )
#install.packages('glmnet')
library('glmnet')
cv.ridge <- cv.glmnet(x,y,family='binomial',parallel=TRUE, standardize=TRUE,alpha=0,type.measure = 'auc')
plot(cv.ridge)
opt_lambda<-cv.ridge$lambda.min
cv.ridge$lambda.1se
coef(cv.ridge,s=cv.ridge$lambda.min)
fit<-cv.ridge$glmnet.fit
print(fit)
pred <-predict(fit,s=opt_lambda,newx = test)
pred <-predict(fit,s=opt_lambda,newx = x_test)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))"
#After running the cross validation ridge regression I obtained a lambda min which was used as the
#tuning parameter
# 11. Run naive bayes on the data set.
# 2 points
#install.packages("e1071")
library("e1071")
levels(train$Payment_status)
model <- naiveBayes(Payment_status ~.,data=train)
print(model)
pred <-predict(model,test)
table(pred)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
#Accuracy of Naive Bayes model is close to 72%
# 12. Build a decision tree to classify the customers as defaulted
# or not-defaulted. Plot the resulting tree. Discuss whether you
# feel this is a good model.
# 2 points
#install.packages("party")
library("party")
png(file="desicion_tree.png")
output.tree <- ctree(Payment_status ~.,data=train)
plot(output.tree)
dev.off()
#The tree seesm to overfit hence doesnot seems to be a good model. If any new values pop up
#in test, then model would give errorneous values.
# 13. Build a random forest model and apply it to classify the test data set.
# 2 points
#install.packages("randomForest")
library("randomForest")
df.randomf <- randomForest(Payment_status ~ .,data=train)
#install.packages('glmnet')
library('glmnet')
cv.ridge <- cv.glmnet(x,y,family='binomial',parallel=TRUE, standardize=TRUE,alpha=0,type.measure = 'auc')
plot(cv.ridge)
opt_lambda<-cv.ridge$lambda.min
cv.ridge$lambda.1se
coef(cv.ridge,s=cv.ridge$lambda.min)
fit<-cv.ridge$glmnet.fit
pred <-predict(fit,s=opt_lambda,newx = x_test)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))"
#After running the cross validation ridge regression I obtained a lambda min which was used as the
#tuning parameter
# 11. Run naive bayes on the data set.
# 2 points
#install.packages("e1071")
library("e1071")
levels(train$Payment_status)
model <- naiveBayes(Payment_status ~.,data=train)
print(model)
pred <-predict(model,test)
table(pred)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
#Accuracy of Naive Bayes model is close to 72%
# 12. Build a decision tree to classify the customers as defaulted
# or not-defaulted. Plot the resulting tree. Discuss whether you
# feel this is a good model.
# 2 points
#install.packages("party")
library("party")
png(file="desicion_tree.png")
output.tree <- ctree(Payment_status ~.,data=train)
plot(output.tree)
dev.off()
#The tree seesm to overfit hence doesnot seems to be a good model. If any new values pop up
#in test, then model would give errorneous values.
# 13. Build a random forest model and apply it to classify the test data set.
# 2 points
#install.packages("randomForest")
library("randomForest")
df.randomf <- randomForest(Payment_status ~ .,data=train)
pred <-predict(fit,s=opt_lambda,newx = x_test)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
x_test <- model.matrix(Payment_status~.,test)
probab <- fit.ridge %>% predict(newx=x_test)
cv <-cv.glmnet(x,y,alpha=0)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- (train$Payment_status)
cv <-cv.glmnet(x,y,alpha=0)
head(y)
cv <-cv.glmnet(x,y,alpha=0)
cv <-cv.glmnet(x,y,alpha=0)
x<- model.matrix(Payment_status~.,train)
#x <- (data.matrix(df %>%
#                 select(LIMIT_BAL,SEX,AGE,EDUCATION,MARRIAGE,PAY_0,PAY_2,PAY_3,PAY_4,BILL_AMT2,BILL_AMT3,BILL_AMT4,BILL_AMT5,BILL_AMT6,PAY_AMT1,PAY_AMT2,PAY_AMT3,PAY_AMT4,PAY_AMT5,PAY_AMT6)))
head(x)
#y <- as.matrix(sapply(df %>%select(Payment_status),as.numeric))
y <- (train$Payment_status)
head(y)
#install.packages("lars")
cv.lasso <- cv.glmnet(x,y,alpha=1,family="binomial")
fit.lasso = glmnet(x,y,alpha = 1,family = "binomial",lambda = cv.lasso$lambda.min)
x_test <- model.matrix(Payment_status~.,test)
probab <- fit.lasso %>% predict(newx=x_test)
predicted.classes <- ifelse(probab > 0.5, 1, 0)
observed.classes <- test$Payment_status
mean(predicted.classes == observed.classes)
cv.ridge <- cv.glmnet(x,y,alpha=0,family="binomial")
fit.ridge = glmnet(x,y,alpha = 0,family = "binomial",lambda = cv.ridge$lambda.min)
print(fit.ridge)
plot(fit.ridge,xvar="lambda",label=TRUE)
#install.packages("lars")
x_test <- model.matrix(Payment_status~.,test)
probab <- fit.ridge %>% predict(newx=x_test)
predicted.classes <- ifelse(probab > 0.5, 1, 0)
observed.classes <- test$Payment_status
mean(predicted.classes == observed.classes)
cv.ridge <- cv.glmnet(x,y,alpha=0,family="binomial")
fit.ridge = glmnet(x,y,alpha = 0,family = "binomial",lambda = cv.ridge$lambda.min)
#install.packages("lars")
x_test <- model.matrix(Payment_status~.,test)
probab <- fit.ridge %>% predict(newx=x_test)
predicted.classes <- ifelse(probab > 0.5, 1, 0)
observed.classes <- test$Payment_status
mean(predicted.classes == observed.classes)
# 11. Run naive bayes on the data set.
# 2 points
#install.packages("e1071")
library("e1071")
levels(train$Payment_status)
model <- naiveBayes(Payment_status ~.,data=train)
print(model)
pred <-predict(model,test)
table(pred)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
#install.packages("party")
library("party")
png(file="desicion_tree.png")
output.tree <- ctree(Payment_status ~.,data=train)
plot(output.tree)
dev.off()
pred <-predict(output.tree,test)
table(pred)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
#The tree seems to predict 82% coorectly
#Accuracy 82.15%
# 13. Build a random forest model and apply it to classify the test data set.
# 2 points
#install.packages("randomForest")
library("randomForest")
df.randomf <- randomForest(Payment_status ~ .,data=train)
df.randomf
pred <-predict(df.randomf,test)
table(pred)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
pred <-predict(output.tree,test)
table(pred)
output.tree <- ctree(Payment_status ~.,data=train)
plot(output.tree)
dev.off()
pred <-predict(output.tree,test)
table(pred)
misClasificError <- mean(pred != test$Payment_status)
print(paste('Accuracy',1-misClasificError))
output.tree
print(fit.ridge)
confusion_matrix(predicted.classes)
library(ROCR)
# 9. Run lasso regression on the data set. Briefly discuss how you determined
# the appropriate tuning parameters.
# 2 points
install.packages("ROCR")
# 9. Run lasso regression on the data set. Briefly discuss how you determined
# the appropriate tuning parameters.
# 2 points
#install.packages("ROCR")
library(ROCR)
confusion_matrix(predicted.classes)
library("ROCR")
